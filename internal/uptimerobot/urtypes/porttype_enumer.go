// Code generated by "enumer -type PortType -json -trimprefix Port"; DO NOT EDIT.

package urtypes

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PortTypeName = "HTTPFTPSMTPPOP3IMAPCustom"

var _PortTypeIndex = [...]uint8{0, 4, 7, 11, 15, 19, 25}

const _PortTypeLowerName = "httpftpsmtppop3imapcustom"

func (i PortType) String() string {
	i -= 1
	if i >= PortType(len(_PortTypeIndex)-1) {
		return fmt.Sprintf("PortType(%d)", i+1)
	}
	return _PortTypeName[_PortTypeIndex[i]:_PortTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PortTypeNoOp() {
	var x [1]struct{}
	_ = x[PortHTTP-(1)]
	_ = x[PortFTP-(2)]
	_ = x[PortSMTP-(3)]
	_ = x[PortPOP3-(4)]
	_ = x[PortIMAP-(5)]
	_ = x[PortCustom-(6)]
}

var _PortTypeValues = []PortType{PortHTTP, PortFTP, PortSMTP, PortPOP3, PortIMAP, PortCustom}

var _PortTypeNameToValueMap = map[string]PortType{
	_PortTypeName[0:4]:        PortHTTP,
	_PortTypeLowerName[0:4]:   PortHTTP,
	_PortTypeName[4:7]:        PortFTP,
	_PortTypeLowerName[4:7]:   PortFTP,
	_PortTypeName[7:11]:       PortSMTP,
	_PortTypeLowerName[7:11]:  PortSMTP,
	_PortTypeName[11:15]:      PortPOP3,
	_PortTypeLowerName[11:15]: PortPOP3,
	_PortTypeName[15:19]:      PortIMAP,
	_PortTypeLowerName[15:19]: PortIMAP,
	_PortTypeName[19:25]:      PortCustom,
	_PortTypeLowerName[19:25]: PortCustom,
}

var _PortTypeNames = []string{
	_PortTypeName[0:4],
	_PortTypeName[4:7],
	_PortTypeName[7:11],
	_PortTypeName[11:15],
	_PortTypeName[15:19],
	_PortTypeName[19:25],
}

// PortTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PortTypeString(s string) (PortType, error) {
	if val, ok := _PortTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PortTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PortType values", s)
}

// PortTypeValues returns all values of the enum
func PortTypeValues() []PortType {
	return _PortTypeValues
}

// PortTypeStrings returns a slice of all String values of the enum
func PortTypeStrings() []string {
	strs := make([]string, len(_PortTypeNames))
	copy(strs, _PortTypeNames)
	return strs
}

// IsAPortType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PortType) IsAPortType() bool {
	for _, v := range _PortTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PortType
func (i PortType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PortType
func (i *PortType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PortType should be a string, got %s", data)
	}

	var err error
	*i, err = PortTypeString(s)
	return err
}
