// Code generated by "enumer -type MonitorType -json -trimprefix Type"; DO NOT EDIT.

package urtypes

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MonitorTypeName = "HTTPSKeywordPingPortHeartbeat"

var _MonitorTypeIndex = [...]uint8{0, 5, 12, 16, 20, 29}

const _MonitorTypeLowerName = "httpskeywordpingportheartbeat"

func (i MonitorType) String() string {
	i -= 1
	if i >= MonitorType(len(_MonitorTypeIndex)-1) {
		return fmt.Sprintf("MonitorType(%d)", i+1)
	}
	return _MonitorTypeName[_MonitorTypeIndex[i]:_MonitorTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MonitorTypeNoOp() {
	var x [1]struct{}
	_ = x[TypeHTTPS-(1)]
	_ = x[TypeKeyword-(2)]
	_ = x[TypePing-(3)]
	_ = x[TypePort-(4)]
	_ = x[TypeHeartbeat-(5)]
}

var _MonitorTypeValues = []MonitorType{TypeHTTPS, TypeKeyword, TypePing, TypePort, TypeHeartbeat}

var _MonitorTypeNameToValueMap = map[string]MonitorType{
	_MonitorTypeName[0:5]:        TypeHTTPS,
	_MonitorTypeLowerName[0:5]:   TypeHTTPS,
	_MonitorTypeName[5:12]:       TypeKeyword,
	_MonitorTypeLowerName[5:12]:  TypeKeyword,
	_MonitorTypeName[12:16]:      TypePing,
	_MonitorTypeLowerName[12:16]: TypePing,
	_MonitorTypeName[16:20]:      TypePort,
	_MonitorTypeLowerName[16:20]: TypePort,
	_MonitorTypeName[20:29]:      TypeHeartbeat,
	_MonitorTypeLowerName[20:29]: TypeHeartbeat,
}

var _MonitorTypeNames = []string{
	_MonitorTypeName[0:5],
	_MonitorTypeName[5:12],
	_MonitorTypeName[12:16],
	_MonitorTypeName[16:20],
	_MonitorTypeName[20:29],
}

// MonitorTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MonitorTypeString(s string) (MonitorType, error) {
	if val, ok := _MonitorTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MonitorTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MonitorType values", s)
}

// MonitorTypeValues returns all values of the enum
func MonitorTypeValues() []MonitorType {
	return _MonitorTypeValues
}

// MonitorTypeStrings returns a slice of all String values of the enum
func MonitorTypeStrings() []string {
	strs := make([]string, len(_MonitorTypeNames))
	copy(strs, _MonitorTypeNames)
	return strs
}

// IsAMonitorType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MonitorType) IsAMonitorType() bool {
	for _, v := range _MonitorTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MonitorType
func (i MonitorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MonitorType
func (i *MonitorType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MonitorType should be a string, got %s", data)
	}

	var err error
	*i, err = MonitorTypeString(s)
	return err
}
