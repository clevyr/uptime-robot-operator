// Code generated by "enumer -type HTTPMethod -json -trimprefix HTTP"; DO NOT EDIT.

package urtypes

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _HTTPMethodName = "HEADGETPOSTPUTPATCHDELETEOPTIONS"

var _HTTPMethodIndex = [...]uint8{0, 4, 7, 11, 14, 19, 25, 32}

const _HTTPMethodLowerName = "headgetpostputpatchdeleteoptions"

func (i HTTPMethod) String() string {
	if i >= HTTPMethod(len(_HTTPMethodIndex)-1) {
		return fmt.Sprintf("HTTPMethod(%d)", i)
	}
	return _HTTPMethodName[_HTTPMethodIndex[i]:_HTTPMethodIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _HTTPMethodNoOp() {
	var x [1]struct{}
	_ = x[HTTPHEAD-(0)]
	_ = x[HTTPGET-(1)]
	_ = x[HTTPPOST-(2)]
	_ = x[HTTPPUT-(3)]
	_ = x[HTTPPATCH-(4)]
	_ = x[HTTPDELETE-(5)]
	_ = x[HTTPOPTIONS-(6)]
}

var _HTTPMethodValues = []HTTPMethod{HTTPHEAD, HTTPGET, HTTPPOST, HTTPPUT, HTTPPATCH, HTTPDELETE, HTTPOPTIONS}

var _HTTPMethodNameToValueMap = map[string]HTTPMethod{
	_HTTPMethodName[0:4]:        HTTPHEAD,
	_HTTPMethodLowerName[0:4]:   HTTPHEAD,
	_HTTPMethodName[4:7]:        HTTPGET,
	_HTTPMethodLowerName[4:7]:   HTTPGET,
	_HTTPMethodName[7:11]:       HTTPPOST,
	_HTTPMethodLowerName[7:11]:  HTTPPOST,
	_HTTPMethodName[11:14]:      HTTPPUT,
	_HTTPMethodLowerName[11:14]: HTTPPUT,
	_HTTPMethodName[14:19]:      HTTPPATCH,
	_HTTPMethodLowerName[14:19]: HTTPPATCH,
	_HTTPMethodName[19:25]:      HTTPDELETE,
	_HTTPMethodLowerName[19:25]: HTTPDELETE,
	_HTTPMethodName[25:32]:      HTTPOPTIONS,
	_HTTPMethodLowerName[25:32]: HTTPOPTIONS,
}

var _HTTPMethodNames = []string{
	_HTTPMethodName[0:4],
	_HTTPMethodName[4:7],
	_HTTPMethodName[7:11],
	_HTTPMethodName[11:14],
	_HTTPMethodName[14:19],
	_HTTPMethodName[19:25],
	_HTTPMethodName[25:32],
}

// HTTPMethodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HTTPMethodString(s string) (HTTPMethod, error) {
	if val, ok := _HTTPMethodNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _HTTPMethodNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HTTPMethod values", s)
}

// HTTPMethodValues returns all values of the enum
func HTTPMethodValues() []HTTPMethod {
	return _HTTPMethodValues
}

// HTTPMethodStrings returns a slice of all String values of the enum
func HTTPMethodStrings() []string {
	strs := make([]string, len(_HTTPMethodNames))
	copy(strs, _HTTPMethodNames)
	return strs
}

// IsAHTTPMethod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HTTPMethod) IsAHTTPMethod() bool {
	for _, v := range _HTTPMethodValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for HTTPMethod
func (i HTTPMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for HTTPMethod
func (i *HTTPMethod) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HTTPMethod should be a string, got %s", data)
	}

	var err error
	*i, err = HTTPMethodString(s)
	return err
}
