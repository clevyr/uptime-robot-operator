// Code generated by "enumer -type POSTContentType -linecomment -json -text"; DO NOT EDIT.

package urtypes

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _POSTContentTypeName = "text/htmlapplication/json"

var _POSTContentTypeIndex = [...]uint8{0, 9, 25}

const _POSTContentTypeLowerName = "text/htmlapplication/json"

func (i POSTContentType) String() string {
	if i >= POSTContentType(len(_POSTContentTypeIndex)-1) {
		return fmt.Sprintf("POSTContentType(%d)", i)
	}
	return _POSTContentTypeName[_POSTContentTypeIndex[i]:_POSTContentTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _POSTContentTypeNoOp() {
	var x [1]struct{}
	_ = x[ContentTypeHTML-(0)]
	_ = x[ContentTypeJSON-(1)]
}

var _POSTContentTypeValues = []POSTContentType{ContentTypeHTML, ContentTypeJSON}

var _POSTContentTypeNameToValueMap = map[string]POSTContentType{
	_POSTContentTypeName[0:9]:       ContentTypeHTML,
	_POSTContentTypeLowerName[0:9]:  ContentTypeHTML,
	_POSTContentTypeName[9:25]:      ContentTypeJSON,
	_POSTContentTypeLowerName[9:25]: ContentTypeJSON,
}

var _POSTContentTypeNames = []string{
	_POSTContentTypeName[0:9],
	_POSTContentTypeName[9:25],
}

// POSTContentTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func POSTContentTypeString(s string) (POSTContentType, error) {
	if val, ok := _POSTContentTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _POSTContentTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to POSTContentType values", s)
}

// POSTContentTypeValues returns all values of the enum
func POSTContentTypeValues() []POSTContentType {
	return _POSTContentTypeValues
}

// POSTContentTypeStrings returns a slice of all String values of the enum
func POSTContentTypeStrings() []string {
	strs := make([]string, len(_POSTContentTypeNames))
	copy(strs, _POSTContentTypeNames)
	return strs
}

// IsAPOSTContentType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i POSTContentType) IsAPOSTContentType() bool {
	for _, v := range _POSTContentTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for POSTContentType
func (i POSTContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for POSTContentType
func (i *POSTContentType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("POSTContentType should be a string, got %s", data)
	}

	var err error
	*i, err = POSTContentTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for POSTContentType
func (i POSTContentType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for POSTContentType
func (i *POSTContentType) UnmarshalText(text []byte) error {
	var err error
	*i, err = POSTContentTypeString(string(text))
	return err
}
