// Code generated by "enumer -type KeywordType -trimprefix Keyword -json -text"; DO NOT EDIT.

package urtypes

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _KeywordTypeName = "ExistsNotExists"

var _KeywordTypeIndex = [...]uint8{0, 6, 15}

const _KeywordTypeLowerName = "existsnotexists"

func (i KeywordType) String() string {
	i -= 1
	if i >= KeywordType(len(_KeywordTypeIndex)-1) {
		return fmt.Sprintf("KeywordType(%d)", i+1)
	}
	return _KeywordTypeName[_KeywordTypeIndex[i]:_KeywordTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KeywordTypeNoOp() {
	var x [1]struct{}
	_ = x[KeywordExists-(1)]
	_ = x[KeywordNotExists-(2)]
}

var _KeywordTypeValues = []KeywordType{KeywordExists, KeywordNotExists}

var _KeywordTypeNameToValueMap = map[string]KeywordType{
	_KeywordTypeName[0:6]:       KeywordExists,
	_KeywordTypeLowerName[0:6]:  KeywordExists,
	_KeywordTypeName[6:15]:      KeywordNotExists,
	_KeywordTypeLowerName[6:15]: KeywordNotExists,
}

var _KeywordTypeNames = []string{
	_KeywordTypeName[0:6],
	_KeywordTypeName[6:15],
}

// KeywordTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KeywordTypeString(s string) (KeywordType, error) {
	if val, ok := _KeywordTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KeywordTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to KeywordType values", s)
}

// KeywordTypeValues returns all values of the enum
func KeywordTypeValues() []KeywordType {
	return _KeywordTypeValues
}

// KeywordTypeStrings returns a slice of all String values of the enum
func KeywordTypeStrings() []string {
	strs := make([]string, len(_KeywordTypeNames))
	copy(strs, _KeywordTypeNames)
	return strs
}

// IsAKeywordType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i KeywordType) IsAKeywordType() bool {
	for _, v := range _KeywordTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for KeywordType
func (i KeywordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for KeywordType
func (i *KeywordType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("KeywordType should be a string, got %s", data)
	}

	var err error
	*i, err = KeywordTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for KeywordType
func (i KeywordType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for KeywordType
func (i *KeywordType) UnmarshalText(text []byte) error {
	var err error
	*i, err = KeywordTypeString(string(text))
	return err
}
