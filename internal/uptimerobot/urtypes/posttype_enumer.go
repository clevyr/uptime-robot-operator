// Code generated by "enumer -type POSTType -trimprefix Type -json -text"; DO NOT EDIT.

package urtypes

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _POSTTypeName = "KeyValueRawData"

var _POSTTypeIndex = [...]uint8{0, 8, 15}

const _POSTTypeLowerName = "keyvaluerawdata"

func (i POSTType) String() string {
	i -= 1
	if i >= POSTType(len(_POSTTypeIndex)-1) {
		return fmt.Sprintf("POSTType(%d)", i+1)
	}
	return _POSTTypeName[_POSTTypeIndex[i]:_POSTTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _POSTTypeNoOp() {
	var x [1]struct{}
	_ = x[TypeKeyValue-(1)]
	_ = x[TypeRawData-(2)]
}

var _POSTTypeValues = []POSTType{TypeKeyValue, TypeRawData}

var _POSTTypeNameToValueMap = map[string]POSTType{
	_POSTTypeName[0:8]:       TypeKeyValue,
	_POSTTypeLowerName[0:8]:  TypeKeyValue,
	_POSTTypeName[8:15]:      TypeRawData,
	_POSTTypeLowerName[8:15]: TypeRawData,
}

var _POSTTypeNames = []string{
	_POSTTypeName[0:8],
	_POSTTypeName[8:15],
}

// POSTTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func POSTTypeString(s string) (POSTType, error) {
	if val, ok := _POSTTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _POSTTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to POSTType values", s)
}

// POSTTypeValues returns all values of the enum
func POSTTypeValues() []POSTType {
	return _POSTTypeValues
}

// POSTTypeStrings returns a slice of all String values of the enum
func POSTTypeStrings() []string {
	strs := make([]string, len(_POSTTypeNames))
	copy(strs, _POSTTypeNames)
	return strs
}

// IsAPOSTType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i POSTType) IsAPOSTType() bool {
	for _, v := range _POSTTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for POSTType
func (i POSTType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for POSTType
func (i *POSTType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("POSTType should be a string, got %s", data)
	}

	var err error
	*i, err = POSTTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for POSTType
func (i POSTType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for POSTType
func (i *POSTType) UnmarshalText(text []byte) error {
	var err error
	*i, err = POSTTypeString(string(text))
	return err
}
